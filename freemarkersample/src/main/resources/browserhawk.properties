# GENERAL SETTINGS

# BrowserHawk license file
#
license.file=Demiah_Bryant_DEVELOPMENT-ONLY.lic

# Maximum number of cache entries; a value of 0 disables
# The DashCache is not available in BrowserHawk Standard Edition.
#
dashcache.max.entries=2000

# Every "interval" milliseconds we scan the cache removing elements not
# accessed within the last "timeout" milliseconds.
# 1800000 == 30 minutes
# 43200000 == 12 hours
#
dashcache.clean.interval=1800000
dashcache.clean.timeout=43200000

# Data files for browser data
#
browser.data.file=maindefs.bdd

# Data files for filter data
#
filter.data.file=maindefs.bdd

# Server base URL to use on self-redirects
# This is the base URL to use on self-redirects which occur during
# ExtendedBrowserInfo detection.  BrowserHawk by default tries to
# determine this automatically based on HttpUtils.getRequestURL(req) 
# and this works for almost all sites.  However, some sites do load 
# balancing in such a way that the URL the server reports isn't the
# URL which should be used.  This causes clients to redirect to the 
# wrong server.  If you see this behavior, uncomment the following 
# and add your own URL to override the automatic detection.  
# Include the protocol, host, and port, but nothing more.
# This can also be set on a per-request basis using
# ExtendedOptions.setServerURL().  Reasons to set this property
# dynamically include: a) if you are running multiple domains in
# same site, b) if you prefer setting properties dynamically at run
# time from your scripts, or c) if you are running BrowserHawk on a
# shared hosting server and don't have write access to this
# .properties file.
# Note that for the vast majority of users this setting is not necessary.
#
# server.url=http://www.cyscape.com:8080


# BROWSERHAWK REPORTS WEB SERVICE SETTINGS

# The following parameters configure how BrowserHawk communicates with
# the BrowserHawk Reports Web Service (BRWS).  For an explanation of BRWS,
# see the README documentation.
#
# The first property specifies the default properties for which you want to
# record statistics when BrowserHawk.logData() is called.  Note that you must
# also use the ExtendedOptions class to tell BrowserHawk to check for at
# least this property list, prior to calling logData().  You can also
# set/override this setting at run-time by passing in this property list
# through an optional parameter in the logData() method call.
#
# The second property specifies the URL where the BRWS4J service resides.
# Relative URLs are permitted.  Make sure to use a hostname that will
# resolve on the client's side.  A hostname of "localhost" for example
# will erroneously cause the client to try to connect to itself for logging.
#
# You can also set/override this setting at run-time using the 
# ExtendedOptions setBrwsURL() method.
#
# If you use BRWS, uncomment these properties and configure them as needed.
#
# brws.properties=Browser,Version,Platform,Height,Width,HeightAvail,WidthAvail
brws.url=http://your_brws_server.com/reports/brws

# This is the same as brws.url but for Page Load Time (PLT).
# If not defined it uses the same value as brws.url.
# Setting this is for advanced users only.
#
# plt.url=http://your_brws_server.com/reports/brws

# This is the same as brws.url but for the ErrorTracker.
# If not defined it uses the same value as brws.url.
# Setting this is for advanced users only.
#
# errortracker.url=http://your_brws_server.com/reports/brws


# ADVANCED FEATURE SETTINGS

# Ports to check when doing OPENPORTS testing.
# It's good to put ports that are more likely to fail at the beginning of the
# list because IE on Windows responds faster if blocked ports are early in the
# list rather than later.
# This value is used unless programmatically overridden with 
# ExtendedOptions.setPortsToCheck().
#
extended.port.check=554,1755,80

# Remote host to connect to when testing OPENPORTS and IMAGESENABLED.
# The server below is made available from cyScape for development but MUST
# BE CHANGED for production because the server does not have guaranteed
# uptime.  The server must make available ON EVERY PORT BEING CHECKED a 
# small image file as specified by extended.port.check.resource.
# BrowserHawk will have the client background load this image file to verify 
# the port is open.  See the README instructions for more information.
# This value can also be set programmatically with 
# ExtendedOptions.setPortCheckURL().
#
extended.port.check.url=http://pchk.cyscape.com

# Remote URL to use for testing SSLENABLED and SSLKEYSIZE.  Also used for
# IMAGESENABLED when queried from secure pages.
# The server below is made available from cyScape for development but MUST
# BE CHANGED for production because the server does not have guaranteed
# uptime.  The server must support https connections on port 443.  For testing
# SSLENABLED or IMAGESENABLED the server needs to have a resource as specified
# by extended.port.check.resource that can be loaded.  For testing SSLKEYSIZE
# the server needs to include an resource as specified by 
# extended.ssl.check.resource.  See the README instructions for more
# information.  This value can also be set programmatically with 
# ExtendedOptions.setSSLCheckURL().
#
extended.ssl.check.url=https://schk.cyscape.com

# Resource to fetch when testing OPENPORTS and IMAGESENABLED.
# This is the resource to be fetched from the extended.port.check.url server
# when testing OPENPORTS and IMAGESENABLED and the
# extended.ssl.check.url server when checking SSLENABLED and IMAGESENABLED.
# Default is /bhawkp1.gif.
#
extended.port.check.resource=/bhawkp1.gif

# Resource to use for determining SSLKEYSIZE.
# Set the value below to the resource on your SSL server which will support
# the SSLKEYSIZE detection.  The default is sslcheck.asp.  An
# alternative value is sslcheck.jsp.  Source code for both versions is
# available with the distribution.  The ASP version of course requires
# Microsoft IIS.  The role of this resource is to return a determination
# of the key size.  Note that some JSP servers don't support this, but all
# IIS servers do.
#
extended.ssl.check.resource=/sslcheck.asp

# Time to wait before assuming a connection has failed.
# This variable affects the OPENPORTS and SSLENABLED checks.  If a check takes
# longer than this timeout, it's assumed a failure.  Increase the value if you
# see false negatives.  The downside of higher values is longer waits when
# ports are blocked.  Note that IE on Windows tries ports serially so the
# possible delay is this value times the number of ports checked.
# This value can also be set programmatically with
# ExtendedOptions.setFirewallTimeout().  Illegal values default to 3000.
#
extended.firewall.timeout=3000

# Sets the custom plugin to test.
# The setting holds data in the format "xxxx,yyyy" where the "," must be 
# present.  "xxxx" represents the ActiveX Class ID, and "yyyy" represents 
# the keyword for the plugin that we'll search the plugins array for.  
# An example string is: "ShockwaveFlash.ShockwaveFlash.6,Flash".
# BrowserHawk then searches for the custom plugin and returns the dynamically
# determined value with the getPluginCustom() method.  If there's no keyword
# for the plugins array, just end the string with a comma.  If there's no
# comma, a BrowserHawkException will be thrown.  This value can also be set
# programmatically with ExtendedOptions.setPluginCustomID().
#
extended.plugin.custom.id=

# Sets a multiplier for the speed test so that fast connections can be more
# accurately timed.  For example, "2" means to send double the data.  The
# default is "1" which works fairly well for modem and DSL connections.
# Use a value like "10" to test cable or LAN speeds, if you know your users
# are primarily on fast connections, or if getConnectionSpeed() returns 0
# indicating the speed was too fast to test with the given multiple.  Setting
# the value to "0" indicates only half the data should be sent, for a rough but 
# quick determination.  This value can also be set programmatically with
# ExtendedOptions.setSpeedCheckAdjustment().  Illegal values default to 1.
#
extended.speed.adjustment=1

# Sets a separate popup file for popup testing.  The default value is empty
# indicating no external file is necessary.  The separate popup file must
# include the right JavaScript to enable the popup detection.
# This value is used as the first argument to the JavaScript
# window.open() call with ?bhspc=1 appended to indicate it's a popup test.
extended.popup.file.name=

# Allows the assignment of a specific name for the popup window.  This
# can be needed in rare cases when specifying a separate popup file for
# popup testing via extended.popup.file.name.
# This value is passed directly as the second argument to the JavaScript
# window.open() call.
extended.popup.window.name=

# Allows the assignment of specific features to the popup window being
# tested.  The default below requests a one pixel off screen window.
# This value is passed directly as the third argument to the JavaScript
# window.open() call.
extended.popup.window.features=width\=1,height\=1,location\=no,toolbar\=no,status\=no,menubar\=no,scrollbars\=no,resizable\=no,top\=3000,left\=3000

# Sets the fonts to test for existence on the client, as a list of comma
# separated values.  For example, "arial,helvetica,courier".
#extended.font.check=times,arial,helvetica,courier new,microsoft sans serif,webdings

# Assigns the max age (in days) for the test cookie used to test permanent
# cookies. The default value is 2 days. Legal values are between 1 and 1825
# (365*5) inclusive. It's best to use as short a time as possible for
# expiration. The downside to too short a value is that if the visitor's
# clock is off significantly it can cause problems. For example if you use
# a value of 2 days and the visitor's clock is set accidentially 3 days
# ahead, the cookie will expire immediately and they will be see as having
# disabled persistent cookies even if they are enabled. Don't change this
# property unless you've experienced problems.
extended.cookie.duration=2

# Time in milliseconds to wait during a broadband test before determining
# the download of 50k has taken too long and the client does not have
# broadband.  Higher values allow more clients to appear as broadband.
broadband.max.wait=1500

# A page message is used to display a message in the user's browser while the
# extended properties are detected.  This is helpful for letting the user know
# to please wait while the test is performed.  In many cases the test is
# performed so quickly that the message may only appear for a fraction of a
# second.  However if you are testing a lot of properties or time intensive
# properties (such as connection speed) there could be a delay of several
# seconds, depending on their computer.  You can also pass HTML in this
# parameter if you wish to display a temporary page or more advanced
# formatting.  The default is the empty string.  You may want to use "Now
# determining extended properties of this browser, please wait...".
#
# This value also can be set programmatically using
# ExtendedOptions.setPageMessage().
#
# page.message=

# A page title is used to tell BrowserHawk what text to insert in between the
# <TITLE> tags used by the test page it loads to detect the special
# properties.
#
# This value also can be set programmatically using
# ExtendedOptions.setPageTitle().
#
# page.title=

# This setting is for power users only.  This property specifies an override
# for the message written to the browser in the extremely rare event the
# browser is in "high security" mode where automatic redirects back to the
# server won't execute.  This message should instruct the user to click the
# message text in order to continue the detection.  The link is by default
# specially crafted to indicate the high security mode is in effect, but can
# separately be overridden with the high.security.link property.  The default
# high security message text is simply, "Please click here to continue."  If
# you override this text you have the option to include HTML tags in your
# message.  You don't have to include an HTML link, but if you do, you should
# set high.security.link to empty so your high security message won't be made
# into a link.
#
# This value also can be set programmatically using
# ExtendedOptions.setHighSecurityMessage().
#
# high.security.message=

# This setting is for power users only.  This property specifies an override
# for the link location used in the extremely rare event the browser is in
# "high security" mode and the high.security.message text must be written.
# The default high security link is dynamically calculated to redirect back to
# the server using a special "bhjs=-1" argument to indicate the high security
# state.  Using this method you can instead point the user to a static page
# explaining they aren't able to continue with the site.  Assigning a null or
# the empty string value means to not make the high security message into a
# link.  Note that if you provide your own link to a page running BrowserHawk,
# the link should include bhjs=-1 to indicate to BrowserHawk that the test was
# completed.
#
# This value also can be set programmatically using
# ExtendedOptions.setHighSecurityMessage().
#
# high.security.link=

# This setting controls what kind of ConnectionSpeed test gets run.  Choices are
# CLASSIC and PROGRESSIVE.  CLASSIC approach is the default and the same as has
# been used in previous versions of BrowserHawk.  It requires no special
# configuration and works by sending a single short burst of data from the server
# to the client.  The PROGRESSIVE approach is new with BrowserHawk 12 and tests
# progressively larger files to get a more accurate reading as well as determining
# a ConnectionLatency value.  To use PROGRESSIVE you must install a few data files
# for the client to pull, and configure the bhawk.supportfilesroot property below
# to indicate where you installed them.
#
# You can also call the ExtendedOptions setSpeedCheckType() method at runtime.
#
# Choose CLASSIC or PROGRESSIVE.
#
extended.speed.type=CLASSIC

# This setting controls where the connection speed data files (and potentially
# others later) can be found.  This is a web location, not a filesystem location.
#
# You can also call the ExtendedOptions setSupportFilesRoot() method at runtime.
#
 bhawk.supportfilesroot= ../pub/sc_marlboro/browserhawk

# This setting allows you to control how the ConnectionSpeed test operates.
# It sets the desired max bps cutoff for the speed check test.  This is useful in
# saving bandwidth.  The connection speed test works by pulling first tiny, then
# larger and larger files, to determine the total bandwidth available.  On slow
# connections only small files are pulled.  On faster connections larger and larger
# files are pulled.  This value, in bits per second, like 5000000 for 5 Megabits per
# second, dictates a cutoff where if the preliminary speed testing with small files
# determines the actual speed is going to be above this value the testing won't
# continue any further.  Thus large files aren't pulled and bandwidth is saved.
# The returned test value will be the early estimate of the speed, less accurate
# than if there were no cutoff.  A value of 0 means no cutoff.
#
#extended.speed.maxbpscutoff=0

# This setting allows you to control how the ConnectionSpeed test operates.
# It sets the desired duration for the speed check test.  This is not a maximum,
# but rather an approximate time the test should take.  The value is used in
# determining what data file size to use in the test.
#
# You can also call the ExtendedOptions setSpeedCheckTestSeconds() method at
# runtime.
#
#extended.speed.testseconds=3

# This setting controls the maximum time, in seconds, for the speed check test
# before the test is going to forcibly halt and return -1 values as
# the result.  Values must be between 3 and 300.  Defaults to 30.
#
# You can also call the ExtendedOptions setSpeedCheckMaxWait() method at
# runtime.
#
#extended.speed.max.wait=30

# This setting is similar to extended.speed.testseconds but for upload speed
# testing.  It sets the desired duration for the speed check test.  This is not
# a maximum, but rather an approximate time the test should take.  The value is
# used in determining how much data should be used in the test.
#
# You can also call the ExtendedOptions setUploadSpeedCheckTestSeconds() method
# at runtime.
#
#extended.upload.testseconds=5

# This setting is similar to extended.speed.max.wait but for upload speed
# testing.  It controls the maximum time, in seconds, for the upload speed check
# test before the test is going to forcibly halt and return -1 values as
# the result.  Values must be between 3 and 300.  Defaults to 30.
#
# You can also call the ExtendedOptions setUploadSpeedCheckMaxWait() method at
# runtime.
#
#extended.upload.max.wait=30

# During upload speed testing there are generally two tests, an initial test of
# fixed length and a second longer test of a size determined mathematically based
# on the apparent speed of the first test and the desired duration of the upload
# test.  This setting controls the fixed size of the first upload test.  Values
# must be between 1 and 1,000,000 bytes.  Defaults to 50,000.
#
# You can also call the ExtendedOptions setUploadSpeedCheckFirstDataSize() method
# at runtime.
#
#extended.upload.firstdatasize=50000

# During upload speed testing there are generally two tests, as explained above.
# This setting controls the second longer test and assigns a maximum byte value for
# that test.  This only impacts behavior if the first test completes very quickly
# and/or the desired test duration is very long, such that the math indicates a
# second test should be large for an accurate reading.  This sets a limit to how
# large the second test can be.  Values must be between 1 and 10,000,000 bytes.
# Defaults to 2,000,000.
#
# You can also call the ExtendedOptions setUploadSpeedCheckMaxDataSize() method at
# runtime.
#
#extended.upload.maxdatasize=50000

# Sets the desired upload target, which is a URL that the upload test sends data to
# during the test.  In normal circumstances the default works fine.  The default is
# to hit the same page that's running the test with ?bhspc=up which tells
# BrowserHawk running within that page to consume the POST data and return a proper
# response.  If you point at another URL you'll need to have that page consume all
# the incoming POST data and set a response header "Access-Control-Allow-Origin" to
# the value "*" (just an asterisk, not including the quotes).  This can be useful
# for testing to servers other than the origin server.
#
# You can also call the ExtendedOptions setUploadSpeedCheckTargetURL() method at
# runtime.
#
#extended.upload.target.url=http://yoursite.com/posteater

